// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: transcoders.proto

package proto

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TranscoderStatus int32

const (
	TranscoderStatusAvailable TranscoderStatus = 0
	TranscoderStatusOffline   TranscoderStatus = 1
	TranscoderStatusError     TranscoderStatus = 2
)

var TranscoderStatus_name = map[int32]string{
	0: "available",
	1: "offline",
	2: "error",
}

var TranscoderStatus_value = map[string]int32{
	"available": 0,
	"offline":   1,
	"error":     2,
}

func (x TranscoderStatus) String() string {
	return proto.EnumName(TranscoderStatus_name, int32(x))
}

func (TranscoderStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8108dbd5ecfc2750, []int{0}
}

type Transcoder struct {
	Id                   string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CpuCores             int64            `protobuf:"varint,2,opt,name=cpu_cores,json=cpuCores,proto3" json:"cpu_cores,omitempty"`
	CpuMhz               float64          `protobuf:"fixed64,3,opt,name=cpu_mhz,json=cpuMhz,proto3" json:"cpu_mhz,omitempty"`
	TotalMemory          int64            `protobuf:"varint,4,opt,name=total_memory,json=totalMemory,proto3" json:"total_memory,omitempty"`
	Address              string           `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	Status               TranscoderStatus `protobuf:"varint,6,opt,name=status,proto3,enum=proto.TranscoderStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Transcoder) Reset()         { *m = Transcoder{} }
func (m *Transcoder) String() string { return proto.CompactTextString(m) }
func (*Transcoder) ProtoMessage()    {}
func (*Transcoder) Descriptor() ([]byte, []int) {
	return fileDescriptor_8108dbd5ecfc2750, []int{0}
}
func (m *Transcoder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Transcoder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Transcoder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Transcoder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transcoder.Merge(m, src)
}
func (m *Transcoder) XXX_Size() int {
	return m.Size()
}
func (m *Transcoder) XXX_DiscardUnknown() {
	xxx_messageInfo_Transcoder.DiscardUnknown(m)
}

var xxx_messageInfo_Transcoder proto.InternalMessageInfo

func (m *Transcoder) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Transcoder) GetCpuCores() int64 {
	if m != nil {
		return m.CpuCores
	}
	return 0
}

func (m *Transcoder) GetCpuMhz() float64 {
	if m != nil {
		return m.CpuMhz
	}
	return 0
}

func (m *Transcoder) GetTotalMemory() int64 {
	if m != nil {
		return m.TotalMemory
	}
	return 0
}

func (m *Transcoder) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Transcoder) GetStatus() TranscoderStatus {
	if m != nil {
		return m.Status
	}
	return TranscoderStatusAvailable
}

type Assignment struct {
	Workorder            *WorkOrder `protobuf:"bytes,1,opt,name=workorder,proto3" json:"workorder,omitempty"`
	Profile              *Profile   `protobuf:"bytes,2,opt,name=profile,proto3" json:"profile,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Assignment) Reset()         { *m = Assignment{} }
func (m *Assignment) String() string { return proto.CompactTextString(m) }
func (*Assignment) ProtoMessage()    {}
func (*Assignment) Descriptor() ([]byte, []int) {
	return fileDescriptor_8108dbd5ecfc2750, []int{1}
}
func (m *Assignment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Assignment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Assignment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Assignment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Assignment.Merge(m, src)
}
func (m *Assignment) XXX_Size() int {
	return m.Size()
}
func (m *Assignment) XXX_DiscardUnknown() {
	xxx_messageInfo_Assignment.DiscardUnknown(m)
}

var xxx_messageInfo_Assignment proto.InternalMessageInfo

func (m *Assignment) GetWorkorder() *WorkOrder {
	if m != nil {
		return m.Workorder
	}
	return nil
}

func (m *Assignment) GetProfile() *Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

func init() {
	proto.RegisterEnum("proto.TranscoderStatus", TranscoderStatus_name, TranscoderStatus_value)
	proto.RegisterType((*Transcoder)(nil), "proto.Transcoder")
	proto.RegisterType((*Assignment)(nil), "proto.Assignment")
}

func init() { proto.RegisterFile("transcoders.proto", fileDescriptor_8108dbd5ecfc2750) }

var fileDescriptor_8108dbd5ecfc2750 = []byte{
	// 457 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0xc7, 0x3b, 0x5d, 0xdb, 0xda, 0x57, 0x2d, 0xd9, 0x01, 0x6d, 0x36, 0xc5, 0x10, 0x8b, 0x87,
	0x20, 0x9a, 0x42, 0x3d, 0x79, 0x5c, 0x65, 0xc1, 0xcb, 0xb2, 0x12, 0x05, 0xc1, 0x4b, 0x49, 0x93,
	0x49, 0x1a, 0x36, 0xe9, 0x0b, 0x33, 0x13, 0x65, 0xfb, 0x09, 0xa4, 0x9f, 0xc0, 0x4b, 0x4f, 0x7a,
	0xf2, 0x23, 0x78, 0xf2, 0xe8, 0xd1, 0x8f, 0x20, 0xf5, 0x8b, 0xc8, 0x4c, 0x12, 0x03, 0xf5, 0x34,
	0xf9, 0xff, 0xdf, 0x2f, 0x33, 0xef, 0xff, 0x78, 0x70, 0x2a, 0x79, 0xb0, 0x11, 0x21, 0x46, 0x8c,
	0x0b, 0xaf, 0xe0, 0x28, 0x91, 0xf6, 0xf4, 0x61, 0x4d, 0x13, 0xc4, 0x24, 0x63, 0x73, 0xad, 0x56,
	0x65, 0x3c, 0x67, 0x79, 0x21, 0x6f, 0x2a, 0xc6, 0x7a, 0x9a, 0xa4, 0x72, 0x5d, 0xae, 0xbc, 0x10,
	0xf3, 0x79, 0x82, 0x09, 0xb6, 0x94, 0x52, 0x5a, 0xe8, 0xaf, 0x1a, 0x37, 0x3e, 0x22, 0xbf, 0x5e,
	0x22, 0x8f, 0x18, 0xaf, 0x9d, 0xbb, 0x05, 0xc7, 0x38, 0xcd, 0x58, 0x25, 0x67, 0x3f, 0x08, 0xc0,
	0xdb, 0x7f, 0x9d, 0xd0, 0x31, 0x74, 0xd3, 0xc8, 0x24, 0x0e, 0x71, 0x87, 0x7e, 0x37, 0x8d, 0xe8,
	0x14, 0x86, 0x61, 0x51, 0x2e, 0x43, 0xe4, 0x4c, 0x98, 0x5d, 0x87, 0xb8, 0x27, 0xfe, 0xed, 0xb0,
	0x28, 0x5f, 0x2a, 0x4d, 0x27, 0x30, 0x50, 0xc5, 0x7c, 0xbd, 0x35, 0x4f, 0x1c, 0xe2, 0x12, 0xbf,
	0x1f, 0x16, 0xe5, 0xe5, 0x7a, 0x4b, 0x1f, 0xc2, 0x1d, 0x89, 0x32, 0xc8, 0x96, 0x39, 0xcb, 0x91,
	0xdf, 0x98, 0xb7, 0xf4, 0x8f, 0x23, 0xed, 0x5d, 0x6a, 0x8b, 0x9a, 0x30, 0x08, 0xa2, 0x88, 0x33,
	0x21, 0xcc, 0x9e, 0x7e, 0xad, 0x91, 0x74, 0x0e, 0x7d, 0x21, 0x03, 0x59, 0x0a, 0xb3, 0xef, 0x10,
	0x77, 0xbc, 0x98, 0x54, 0x9d, 0x7a, 0x6d, 0x97, 0x6f, 0x74, 0xd9, 0xaf, 0xb1, 0x59, 0x0c, 0x70,
	0x2e, 0x44, 0x9a, 0x6c, 0x72, 0xb6, 0x91, 0xd4, 0x83, 0xa1, 0xca, 0xac, 0x23, 0xeb, 0x20, 0xa3,
	0x85, 0x51, 0xdf, 0xf0, 0x0e, 0xf9, 0xf5, 0x95, 0xf2, 0xfd, 0x16, 0xa1, 0x2e, 0x0c, 0xea, 0x89,
	0xe8, 0x7c, 0xa3, 0xc5, 0xb8, 0xa6, 0x5f, 0x57, 0xae, 0xdf, 0x94, 0x1f, 0x7f, 0x23, 0x60, 0x1c,
	0x37, 0x41, 0x9f, 0xc0, 0x30, 0xf8, 0x10, 0xa4, 0x59, 0xb0, 0xca, 0x98, 0xd1, 0xb1, 0x1e, 0xec,
	0xf6, 0xce, 0xd9, 0x31, 0x74, 0xde, 0x00, 0xea, 0x31, 0x8c, 0xe3, 0x2c, 0xdd, 0x30, 0x83, 0x58,
	0xd3, 0xdd, 0xde, 0x99, 0x1c, 0xb3, 0x57, 0x55, 0x99, 0x3e, 0x82, 0x1e, 0xe3, 0x1c, 0xb9, 0xd1,
	0xb5, 0xce, 0x76, 0x7b, 0xe7, 0xde, 0x31, 0x77, 0xa1, 0x8a, 0x96, 0xf9, 0xe9, 0x8b, 0xdd, 0xf9,
	0xfe, 0xd5, 0xfe, 0xaf, 0xaf, 0xc5, 0x2b, 0x18, 0xb5, 0x9e, 0xa0, 0xcf, 0x9b, 0x19, 0xa9, 0x19,
	0xd0, 0xd3, 0x3a, 0x62, 0x3b, 0x36, 0xeb, 0xbe, 0x57, 0x6d, 0x9d, 0xd7, 0xec, 0x93, 0x77, 0xa1,
	0xb6, 0x6e, 0xd6, 0x79, 0x31, 0xf9, 0x79, 0xb0, 0xc9, 0xaf, 0x83, 0x4d, 0x7e, 0x1f, 0x6c, 0xf2,
	0xf9, 0x8f, 0xdd, 0x79, 0x5f, 0xed, 0xe9, 0xaa, 0xaf, 0x8f, 0x67, 0x7f, 0x03, 0x00, 0x00, 0xff,
	0xff, 0x91, 0xaa, 0x5f, 0xfd, 0xca, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TranscodersClient is the client API for Transcoders service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TranscodersClient interface {
	AssignWork(ctx context.Context, in *Assignment, opts ...grpc.CallOption) (*empty.Empty, error)
}

type transcodersClient struct {
	cc *grpc.ClientConn
}

func NewTranscodersClient(cc *grpc.ClientConn) TranscodersClient {
	return &transcodersClient{cc}
}

func (c *transcodersClient) AssignWork(ctx context.Context, in *Assignment, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.Transcoders/AssignWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TranscodersServer is the server API for Transcoders service.
type TranscodersServer interface {
	AssignWork(context.Context, *Assignment) (*empty.Empty, error)
}

func RegisterTranscodersServer(s *grpc.Server, srv TranscodersServer) {
	s.RegisterService(&_Transcoders_serviceDesc, srv)
}

func _Transcoders_AssignWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Assignment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscodersServer).AssignWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Transcoders/AssignWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscodersServer).AssignWork(ctx, req.(*Assignment))
	}
	return interceptor(ctx, in, info, handler)
}

var _Transcoders_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Transcoders",
	HandlerType: (*TranscodersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignWork",
			Handler:    _Transcoders_AssignWork_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transcoders.proto",
}

func (m *Transcoder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transcoder) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTranscoders(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.CpuCores != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTranscoders(dAtA, i, uint64(m.CpuCores))
	}
	if m.CpuMhz != 0 {
		dAtA[i] = 0x19
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CpuMhz))))
		i += 8
	}
	if m.TotalMemory != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTranscoders(dAtA, i, uint64(m.TotalMemory))
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTranscoders(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.Status != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTranscoders(dAtA, i, uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Assignment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Assignment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Workorder != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTranscoders(dAtA, i, uint64(m.Workorder.Size()))
		n1, err := m.Workorder.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Profile != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTranscoders(dAtA, i, uint64(m.Profile.Size()))
		n2, err := m.Profile.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTranscoders(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Transcoder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTranscoders(uint64(l))
	}
	if m.CpuCores != 0 {
		n += 1 + sovTranscoders(uint64(m.CpuCores))
	}
	if m.CpuMhz != 0 {
		n += 9
	}
	if m.TotalMemory != 0 {
		n += 1 + sovTranscoders(uint64(m.TotalMemory))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTranscoders(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTranscoders(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Assignment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Workorder != nil {
		l = m.Workorder.Size()
		n += 1 + l + sovTranscoders(uint64(l))
	}
	if m.Profile != nil {
		l = m.Profile.Size()
		n += 1 + l + sovTranscoders(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTranscoders(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTranscoders(x uint64) (n int) {
	return sovTranscoders(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Transcoder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTranscoders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transcoder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transcoder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTranscoders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTranscoders
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuCores", wireType)
			}
			m.CpuCores = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTranscoders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuCores |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuMhz", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CpuMhz = float64(math.Float64frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalMemory", wireType)
			}
			m.TotalMemory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTranscoders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalMemory |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTranscoders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTranscoders
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTranscoders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (TranscoderStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTranscoders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTranscoders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Assignment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTranscoders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Assignment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Assignment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workorder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTranscoders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTranscoders
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Workorder == nil {
				m.Workorder = &WorkOrder{}
			}
			if err := m.Workorder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTranscoders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTranscoders
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Profile == nil {
				m.Profile = &Profile{}
			}
			if err := m.Profile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTranscoders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTranscoders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTranscoders(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTranscoders
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTranscoders
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTranscoders
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTranscoders
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTranscoders
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTranscoders(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTranscoders = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTranscoders   = fmt.Errorf("proto: integer overflow")
)
