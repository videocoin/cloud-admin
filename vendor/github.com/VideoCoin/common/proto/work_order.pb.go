// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: work_order.proto

package proto

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/any"
	_ "github.com/golang/protobuf/ptypes/duration"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type WorkOrderStatus int32

const (
	WorkOrderStatusNone            WorkOrderStatus = 0
	WorkOrderStatusNew             WorkOrderStatus = 1
	WorkOrderStatusPendingApproval WorkOrderStatus = 2
	WorkOrderStatusApproved        WorkOrderStatus = 3
	WorkOrderStatusWorkStarted     WorkOrderStatus = 4
	WorkOrderStatusTranscoding     WorkOrderStatus = 5
	WorkOrderStatusCanceled        WorkOrderStatus = 6
	WorkOrderStatusFailed          WorkOrderStatus = 7
	WorkOrderStatusCompleted       WorkOrderStatus = 8
	WorkOrderStatusReady           WorkOrderStatus = 9
)

var WorkOrderStatus_name = map[int32]string{
	0: "none",
	1: "new",
	2: "pending_approval",
	3: "approved",
	4: "work_started",
	5: "transcoding",
	6: "canceld",
	7: "failed",
	8: "completed",
	9: "ready",
}

var WorkOrderStatus_value = map[string]int32{
	"none":             0,
	"new":              1,
	"pending_approval": 2,
	"approved":         3,
	"work_started":     4,
	"transcoding":      5,
	"canceld":          6,
	"failed":           7,
	"completed":        8,
	"ready":            9,
}

func (x WorkOrderStatus) String() string {
	return proto.EnumName(WorkOrderStatus_name, int32(x))
}

func (WorkOrderStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f50d4b0a483387a6, []int{0}
}

type WorkOrder struct {
	Id                   int64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TranscoderId         string    `protobuf:"bytes,2,opt,name=transcoder_id,json=transcoderId,proto3" json:"transcoder_id,omitempty"`
	ContractAddress      string    `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	WalletAddress        string    `protobuf:"bytes,4,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	StreamId             int64     `protobuf:"varint,7,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	InputUrl             string    `protobuf:"bytes,9,opt,name=input_url,json=inputUrl,proto3" json:"input_url,omitempty"`
	OutputUrl            string    `protobuf:"bytes,10,opt,name=output_url,json=outputUrl,proto3" json:"output_url,omitempty"`
	Status               string    `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	Chunks               []byte    `protobuf:"bytes,12,opt,name=chunks,proto3" json:"chunks,omitempty" gorm:"chunks;type:json"sql:"type:json"`
	CreatedAt            int64     `protobuf:"varint,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int64     `protobuf:"varint,14,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Worker               []byte    `protobuf:"bytes,15,opt,name=worker,proto3" json:"worker,omitempty" gorm:"worker;type:binary(32);DEFAULT:NULL"sql:"type:binary(32);DEFAULT:null"`
	MaxWork              float32   `protobuf:"fixed32,16,opt,name=max_work,json=maxWork,proto3" json:"max_work,omitempty"`
	MinWork              float32   `protobuf:"fixed32,17,opt,name=min_work,json=minWork,proto3" json:"min_work,omitempty"`
	ActualWork           float32   `protobuf:"fixed32,18,opt,name=actual_work,json=actualWork,proto3" json:"actual_work,omitempty"`
	Profile              ProfileId `protobuf:"varint,19,opt,name=profile,proto3,enum=proto.ProfileId" json:"profile,omitempty"`
	Refunded             bool      `protobuf:"varint,20,opt,name=refunded,proto3" json:"refunded,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *WorkOrder) Reset()         { *m = WorkOrder{} }
func (m *WorkOrder) String() string { return proto.CompactTextString(m) }
func (*WorkOrder) ProtoMessage()    {}
func (*WorkOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_f50d4b0a483387a6, []int{0}
}
func (m *WorkOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkOrder.Merge(m, src)
}
func (m *WorkOrder) XXX_Size() int {
	return m.Size()
}
func (m *WorkOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkOrder.DiscardUnknown(m)
}

var xxx_messageInfo_WorkOrder proto.InternalMessageInfo

func (m *WorkOrder) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *WorkOrder) GetTranscoderId() string {
	if m != nil {
		return m.TranscoderId
	}
	return ""
}

func (m *WorkOrder) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *WorkOrder) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *WorkOrder) GetStreamId() int64 {
	if m != nil {
		return m.StreamId
	}
	return 0
}

func (m *WorkOrder) GetInputUrl() string {
	if m != nil {
		return m.InputUrl
	}
	return ""
}

func (m *WorkOrder) GetOutputUrl() string {
	if m != nil {
		return m.OutputUrl
	}
	return ""
}

func (m *WorkOrder) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *WorkOrder) GetChunks() []byte {
	if m != nil {
		return m.Chunks
	}
	return nil
}

func (m *WorkOrder) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *WorkOrder) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *WorkOrder) GetWorker() []byte {
	if m != nil {
		return m.Worker
	}
	return nil
}

func (m *WorkOrder) GetMaxWork() float32 {
	if m != nil {
		return m.MaxWork
	}
	return 0
}

func (m *WorkOrder) GetMinWork() float32 {
	if m != nil {
		return m.MinWork
	}
	return 0
}

func (m *WorkOrder) GetActualWork() float32 {
	if m != nil {
		return m.ActualWork
	}
	return 0
}

func (m *WorkOrder) GetProfile() ProfileId {
	if m != nil {
		return m.Profile
	}
	return ProfileIdNone
}

func (m *WorkOrder) GetRefunded() bool {
	if m != nil {
		return m.Refunded
	}
	return false
}

func init() {
	proto.RegisterEnum("proto.WorkOrderStatus", WorkOrderStatus_name, WorkOrderStatus_value)
	proto.RegisterType((*WorkOrder)(nil), "proto.WorkOrder")
}

func init() { proto.RegisterFile("work_order.proto", fileDescriptor_f50d4b0a483387a6) }

var fileDescriptor_f50d4b0a483387a6 = []byte{
	// 768 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x94, 0x4f, 0x8f, 0xdb, 0x44,
	0x18, 0x87, 0xe3, 0x64, 0xf3, 0xc7, 0xb3, 0x49, 0xd6, 0x4c, 0x4b, 0xd7, 0xeb, 0x82, 0x63, 0x52,
	0x15, 0x79, 0x17, 0xb1, 0x41, 0xed, 0x05, 0xa5, 0xa7, 0x2c, 0x50, 0x69, 0xa5, 0xa8, 0xac, 0xdc,
	0xae, 0x90, 0xb8, 0x44, 0x13, 0xcf, 0xc4, 0x6b, 0xd6, 0x9e, 0x31, 0xe3, 0x31, 0x69, 0xbe, 0x01,
	0xf2, 0x81, 0x33, 0x17, 0x9f, 0xe0, 0x53, 0x70, 0xe2, 0xd8, 0x23, 0x57, 0x2e, 0x15, 0xda, 0xfd,
	0x06, 0xfd, 0x04, 0xc8, 0x33, 0x4e, 0x53, 0x59, 0x7b, 0xb2, 0xdf, 0xdf, 0xf3, 0xbc, 0xf6, 0x1b,
	0xcd, 0x1b, 0x03, 0x63, 0xcd, 0xf8, 0xf5, 0x82, 0x71, 0x4c, 0xf8, 0x69, 0xc2, 0x99, 0x60, 0xb0,
	0x2d, 0x2f, 0xd6, 0x28, 0x60, 0x2c, 0x88, 0xc8, 0x44, 0x56, 0xcb, 0x6c, 0x35, 0x11, 0x61, 0x4c,
	0x52, 0x81, 0xe2, 0x44, 0x79, 0x96, 0x5d, 0x17, 0x70, 0xc6, 0x91, 0x08, 0x19, 0xad, 0xf8, 0x51,
	0x9d, 0x23, 0xba, 0xa9, 0xd0, 0x97, 0x41, 0x28, 0xae, 0xb2, 0xe5, 0xa9, 0xcf, 0xe2, 0x49, 0xc0,
	0x02, 0xb6, 0x73, 0xca, 0x4a, 0x16, 0xf2, 0xae, 0xd2, 0x01, 0xcd, 0xa2, 0xa8, 0xba, 0x1f, 0x24,
	0x9c, 0xad, 0xc2, 0x88, 0xa8, 0x72, 0xfc, 0x5b, 0x1b, 0xe8, 0x3f, 0x30, 0x7e, 0xfd, 0x7d, 0xf9,
	0x03, 0xe0, 0x10, 0x34, 0x43, 0x6c, 0x6a, 0x8e, 0xe6, 0xb6, 0xbc, 0x66, 0x88, 0xe1, 0x23, 0x30,
	0x10, 0x1c, 0xd1, 0xd4, 0x67, 0x98, 0xf0, 0x45, 0x88, 0xcd, 0xa6, 0xa3, 0xb9, 0xba, 0xd7, 0xdf,
	0x85, 0xe7, 0x18, 0x1e, 0x03, 0xc3, 0x67, 0x54, 0x70, 0xe4, 0x8b, 0x05, 0xc2, 0x98, 0x93, 0x34,
	0x35, 0x5b, 0xd2, 0x3b, 0xd8, 0xe6, 0x33, 0x15, 0xc3, 0xc7, 0x60, 0xb8, 0x46, 0x51, 0x44, 0x76,
	0xe2, 0x9e, 0x14, 0x07, 0x2a, 0xdd, 0x6a, 0x0f, 0x81, 0x9e, 0x0a, 0x4e, 0x50, 0x5c, 0xbe, 0xb2,
	0x2b, 0xa7, 0xe9, 0xa9, 0xe0, 0x1c, 0x97, 0x30, 0xa4, 0x49, 0x26, 0x16, 0x19, 0x8f, 0x4c, 0x5d,
	0xb6, 0xf7, 0x64, 0x70, 0xc9, 0x23, 0xf8, 0x29, 0x00, 0x2c, 0x13, 0x5b, 0x0a, 0x24, 0xd5, 0x55,
	0x52, 0xe2, 0x07, 0xa0, 0x93, 0x0a, 0x24, 0xb2, 0xd4, 0xdc, 0x97, 0xa8, 0xaa, 0xe0, 0x19, 0xe8,
	0xf8, 0x57, 0x19, 0xbd, 0x4e, 0xcd, 0xbe, 0xa3, 0xb9, 0xfd, 0xb3, 0x93, 0x77, 0x6f, 0x47, 0x9f,
	0x07, 0x8c, 0xc7, 0xd3, 0xb1, 0xca, 0x9f, 0x89, 0x4d, 0x42, 0xa6, 0x3f, 0xa5, 0x8c, 0x8e, 0xd3,
	0x9f, 0xa3, 0xe9, 0x78, 0x57, 0x7a, 0x55, 0x67, 0xf9, 0x6a, 0x9f, 0x13, 0x24, 0x08, 0x5e, 0x20,
	0x61, 0x0e, 0xe4, 0xd4, 0x7a, 0x95, 0xcc, 0x44, 0x89, 0xb3, 0x04, 0x6f, 0xf1, 0x50, 0xe1, 0x2a,
	0x99, 0x09, 0x78, 0x05, 0x3a, 0xe5, 0x22, 0x11, 0x6e, 0x1e, 0xc8, 0x09, 0x2e, 0xde, 0xbd, 0x1d,
	0xcd, 0xd5, 0x04, 0x2a, 0x57, 0x13, 0x2c, 0x43, 0x8a, 0xf8, 0xc6, 0x7d, 0xfa, 0xe4, 0xf8, 0xd9,
	0xb7, 0xdf, 0x3d, 0x9f, 0x5d, 0xce, 0x5f, 0x4d, 0x5f, 0x5c, 0xce, 0xe7, 0x1f, 0x0c, 0x75, 0x87,
	0x51, 0x9e, 0xfe, 0xd8, 0xab, 0x9e, 0x0f, 0x8f, 0x40, 0x2f, 0x46, 0xaf, 0x17, 0x65, 0x65, 0x1a,
	0x8e, 0xe6, 0x36, 0xbd, 0x6e, 0x8c, 0x5e, 0x97, 0x3b, 0x20, 0x51, 0x48, 0x15, 0xfa, 0xa8, 0x42,
	0x21, 0x95, 0x68, 0x04, 0xf6, 0x91, 0x2f, 0x32, 0x14, 0x29, 0x0a, 0x25, 0x05, 0x2a, 0x92, 0xc2,
	0x09, 0xe8, 0x56, 0x9b, 0x65, 0xde, 0x73, 0x34, 0x77, 0xf8, 0xc4, 0x50, 0x1b, 0x76, 0x7a, 0xa1,
	0xd2, 0x73, 0xec, 0x6d, 0x05, 0x68, 0x81, 0x1e, 0x27, 0xab, 0x8c, 0x62, 0x82, 0xcd, 0xfb, 0x8e,
	0xe6, 0xf6, 0xbc, 0xf7, 0xf5, 0xc9, 0xbf, 0x2d, 0x70, 0xf0, 0x7e, 0x21, 0x5f, 0xaa, 0xe3, 0xf9,
	0x0c, 0xec, 0x51, 0x46, 0x89, 0xd1, 0xb0, 0x0e, 0xf3, 0xc2, 0xb9, 0x57, 0xc3, 0x2f, 0x18, 0x25,
	0x70, 0x04, 0x5a, 0x94, 0xac, 0x0d, 0xcd, 0x7a, 0x90, 0x17, 0x0e, 0xac, 0x1b, 0x64, 0x0d, 0xbf,
	0x06, 0x46, 0x42, 0x28, 0x0e, 0x69, 0xb0, 0x40, 0x49, 0xc2, 0xd9, 0x2f, 0x28, 0x32, 0x9a, 0xd6,
	0x38, 0x2f, 0x1c, 0xbb, 0x66, 0x5f, 0x28, 0x6d, 0x56, 0x59, 0xf0, 0x18, 0xf4, 0x54, 0x07, 0xc1,
	0x46, 0xcb, 0x7a, 0x98, 0x17, 0xce, 0x61, 0xad, 0x63, 0x56, 0x61, 0xf8, 0x15, 0xe8, 0xcb, 0xcf,
	0x41, 0x2a, 0x10, 0x17, 0x04, 0x1b, 0x7b, 0x96, 0x9d, 0x17, 0x8e, 0x55, 0xd3, 0xcb, 0xf2, 0xa5,
	0x32, 0xe0, 0x04, 0xec, 0x6f, 0xff, 0x4c, 0x21, 0x0d, 0x8c, 0xf6, 0x9d, 0x0d, 0xaf, 0x76, 0x06,
	0x74, 0x41, 0xd7, 0x47, 0xd4, 0x27, 0x11, 0x36, 0x3a, 0x77, 0x0e, 0xf3, 0x8d, 0xa4, 0x04, 0xc3,
	0xc7, 0xa0, 0xb3, 0x42, 0x61, 0x44, 0xb0, 0xd1, 0xb5, 0x8e, 0xf2, 0xc2, 0xf9, 0xb8, 0x26, 0x3e,
	0x97, 0x10, 0x7e, 0x01, 0x74, 0x9f, 0xc5, 0x49, 0x44, 0xca, 0x81, 0x7b, 0xd6, 0x27, 0x79, 0xe1,
	0x98, 0xf5, 0x47, 0x6e, 0x39, 0x7c, 0x04, 0xda, 0x9c, 0x20, 0xbc, 0x31, 0x74, 0xcb, 0xcc, 0x0b,
	0xe7, 0x7e, 0x4d, 0xf4, 0x4a, 0x66, 0x1d, 0xfe, 0xfa, 0x87, 0xdd, 0xf8, 0xeb, 0x4f, 0xbb, 0x7e,
	0x8e, 0x67, 0xa3, 0x37, 0x37, 0xb6, 0xf6, 0xcf, 0x8d, 0xad, 0xfd, 0x77, 0x63, 0x6b, 0xbf, 0xdf,
	0xda, 0x8d, 0xbf, 0x6f, 0x6d, 0xed, 0xcd, 0xad, 0xdd, 0xf8, 0x51, 0x7d, 0x33, 0x97, 0x1d, 0x79,
	0x79, 0xfa, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x22, 0x41, 0xdc, 0x7f, 0x55, 0x05, 0x00, 0x00,
}

func (m *WorkOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkOrder) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWorkOrder(dAtA, i, uint64(m.Id))
	}
	if len(m.TranscoderId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWorkOrder(dAtA, i, uint64(len(m.TranscoderId)))
		i += copy(dAtA[i:], m.TranscoderId)
	}
	if len(m.ContractAddress) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintWorkOrder(dAtA, i, uint64(len(m.ContractAddress)))
		i += copy(dAtA[i:], m.ContractAddress)
	}
	if len(m.WalletAddress) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintWorkOrder(dAtA, i, uint64(len(m.WalletAddress)))
		i += copy(dAtA[i:], m.WalletAddress)
	}
	if m.StreamId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintWorkOrder(dAtA, i, uint64(m.StreamId))
	}
	if len(m.InputUrl) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintWorkOrder(dAtA, i, uint64(len(m.InputUrl)))
		i += copy(dAtA[i:], m.InputUrl)
	}
	if len(m.OutputUrl) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintWorkOrder(dAtA, i, uint64(len(m.OutputUrl)))
		i += copy(dAtA[i:], m.OutputUrl)
	}
	if len(m.Status) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintWorkOrder(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	if len(m.Chunks) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintWorkOrder(dAtA, i, uint64(len(m.Chunks)))
		i += copy(dAtA[i:], m.Chunks)
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintWorkOrder(dAtA, i, uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintWorkOrder(dAtA, i, uint64(m.UpdatedAt))
	}
	if len(m.Worker) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintWorkOrder(dAtA, i, uint64(len(m.Worker)))
		i += copy(dAtA[i:], m.Worker)
	}
	if m.MaxWork != 0 {
		dAtA[i] = 0x85
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MaxWork))))
		i += 4
	}
	if m.MinWork != 0 {
		dAtA[i] = 0x8d
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MinWork))))
		i += 4
	}
	if m.ActualWork != 0 {
		dAtA[i] = 0x95
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.ActualWork))))
		i += 4
	}
	if m.Profile != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintWorkOrder(dAtA, i, uint64(m.Profile))
	}
	if m.Refunded {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		if m.Refunded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintWorkOrder(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *WorkOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovWorkOrder(uint64(m.Id))
	}
	l = len(m.TranscoderId)
	if l > 0 {
		n += 1 + l + sovWorkOrder(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovWorkOrder(uint64(l))
	}
	l = len(m.WalletAddress)
	if l > 0 {
		n += 1 + l + sovWorkOrder(uint64(l))
	}
	if m.StreamId != 0 {
		n += 1 + sovWorkOrder(uint64(m.StreamId))
	}
	l = len(m.InputUrl)
	if l > 0 {
		n += 1 + l + sovWorkOrder(uint64(l))
	}
	l = len(m.OutputUrl)
	if l > 0 {
		n += 1 + l + sovWorkOrder(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovWorkOrder(uint64(l))
	}
	l = len(m.Chunks)
	if l > 0 {
		n += 1 + l + sovWorkOrder(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovWorkOrder(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovWorkOrder(uint64(m.UpdatedAt))
	}
	l = len(m.Worker)
	if l > 0 {
		n += 1 + l + sovWorkOrder(uint64(l))
	}
	if m.MaxWork != 0 {
		n += 6
	}
	if m.MinWork != 0 {
		n += 6
	}
	if m.ActualWork != 0 {
		n += 6
	}
	if m.Profile != 0 {
		n += 2 + sovWorkOrder(uint64(m.Profile))
	}
	if m.Refunded {
		n += 3
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovWorkOrder(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozWorkOrder(x uint64) (n int) {
	return sovWorkOrder(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WorkOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TranscoderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TranscoderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			m.StreamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InputUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunks", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWorkOrder
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chunks = append(m.Chunks[:0], dAtA[iNdEx:postIndex]...)
			if m.Chunks == nil {
				m.Chunks = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Worker", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWorkOrder
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Worker = append(m.Worker[:0], dAtA[iNdEx:postIndex]...)
			if m.Worker == nil {
				m.Worker = []byte{}
			}
			iNdEx = postIndex
		case 16:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxWork", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MaxWork = float32(math.Float32frombits(v))
		case 17:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinWork", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MinWork = float32(math.Float32frombits(v))
		case 18:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualWork", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.ActualWork = float32(math.Float32frombits(v))
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			m.Profile = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Profile |= (ProfileId(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refunded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Refunded = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipWorkOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWorkOrder(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWorkOrder
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthWorkOrder
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowWorkOrder
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipWorkOrder(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthWorkOrder = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWorkOrder   = fmt.Errorf("proto: integer overflow")
)
